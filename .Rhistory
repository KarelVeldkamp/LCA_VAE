library(poLCA)
nclass = 8
nitems = 100
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 1)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 8
nitems = 100
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 8
nitems = 100
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 1)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 8
nitems = 200
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 1)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 8
nitems = 200
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 6
nitems = 200
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 10
nitems = 100
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 10
nitems = 100
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 10
nitems = 200
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 10
nitems = 200
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
library(poLCA)
nclass = 10
nitems = 400
N = 10000
# Generate class probabilities
class_probs <- rep(1/nclass, nclass)
# Generate conditional probabilities
cond_probs <- matrix(runif(nclass * nitems, min = 0, max = 1), nrow = nclass)
# Generate true class membership for each person
true_class_ix <- sample(1:nclass, size = N, replace = TRUE, prob = class_probs)
true_class <- matrix(0, nrow = N, ncol = nclass)
true_class[cbind(1:N, true_class_ix)] <- 1
# Simulate responses
prob <- true_class %*% cond_probs
data <- data.frame(matrix(rbinom(N * nitems, size = 1, prob), nrow = N)) + 1
f <- as.formula(paste("cbind(", paste(colnames(data), collapse = ","), ") ~ 1"))
start=Sys.time()
lca = poLCA(f, data, nclass = nclass, nrep = 5)
runtime = Sys.time()-start
print(runtime)
# save estimated parameters
est_probs =  t(as.matrix(do.call(rbind, lapply(lca$probs, function(mat) mat[, 2]))))
est_class_probs = lca$posterior
#plot(as.vector(est_probs), as.vector(true_probs))
# assign classes to fix label switching
new_order = as.vector(clue::solve_LSAP(abs(cor(t(est_probs), t(cond_probs))), maximum = T))
cond_probs = cond_probs[new_order, ]
true_class = true_class[, new_order]
est_class = apply(est_class_probs, 1, which.max)
true_class = apply(true_class, 1, which.max)
acc = mean(est_class == true_class)
mse = mean((cond_probs - est_probs)^2)
print(acc)
print(mse)
plot(cond_probs, est_probs, col=as.numeric(est_class==true_class)+1)
expand.grid('gs', 10, c(1, .999, .995, .99, .95, .9), 1:20)
gs = expand.grid('gs', 10, c(1, .999, .995, .99, .95, .9), 1:20)
vq = expand.grid('vq', 10, 1, 1:20)
rbind(gs, vq)
pars = rbind(gs, vq)
write.table(pars, file = '~/Documents/GitHub/LCA_VAE/sim_pars.txt')
write.table(pars, file = '~/Documents/GitHub/LCA_VAE/sim_pars.txt', col.names = F, row.names = F)
write.table(pars, file = '~/Documents/GitHub/LCA_VAE/sim_pars.txt', col.names = F, row.names = F, quote = F)
path = 'results/metrics/'
files = list.files(path)
model = nclass = nrep = iteration = acc = mse = c()
for (file in files){
split = strsplit(file, '_')[[1]]
model = c(model, split[1])
nclass = c(nclass, split[2])
nrep = c(nrep, split[3])
iteration = c(iteration, as.numeric(substr(split[4], 1, nchar(split[4])-4)))
res = read.table(paste0(path, file))
acc = c(acc, res[1,1])
mse = c(mse, res[2,1])
}
results = data.frame(model, nclass, nrep, iteration, acc, mse)
results
library(tidyverse)
path = 'results/metrics/'
files = list.files(path)
model = nclass = nrep = iteration = acc = mse = c()
for (file in files){
split = strsplit(file, '_')[[1]]
model = c(model, split[1])
nclass = c(nclass, split[2])
nrep = c(nrep, split[3])
iteration = c(iteration, as.numeric(substr(split[4], 1, nchar(split[4])-4)))
res = read.table(paste0(path, file))
acc = c(acc, res[1,1])
mse = c(mse, res[2,1])
}
results = data.frame(model, nclass, nrep, iteration, acc, mse)
results
model
setwd("~/Documents/GitHub/LCA_VAE")
path = 'results/metrics/'
files = list.files(path)
model = nclass = nrep = iteration = acc = mse = c()
for (file in files){
split = strsplit(file, '_')[[1]]
model = c(model, split[1])
nclass = c(nclass, split[2])
nrep = c(nrep, split[3])
iteration = c(iteration, as.numeric(substr(split[4], 1, nchar(split[4])-4)))
res = read.table(paste0(path, file))
acc = c(acc, res[1,1])
mse = c(mse, res[2,1])
}
results = data.frame(model, nclass, nrep, iteration, acc, mse)
results
model = nclass = decay = iteration = acc = mse = c()
for (file in files){
split = strsplit(file, '_')[[1]]
model = c(model, split[1])
nclass = c(nclass, split[2])
decay = c(decay, split[3])
iteration = c(iteration, as.numeric(substr(split[4], 1, nchar(split[4])-4)))
res = read.table(paste0(path, file))
acc = c(acc, res[1,1])
mse = c(mse, res[2,1])
}
results = data.frame(model, nclass, nrep, iteration, acc, mse)
results %>%
group_by(model, nclass, decay)
results
results %>%
group_by(model, nclass, decay) %>%
summarise(mean(acc), mean(mse))
results
results = data.frame(model, nclass, decay, iteration, acc, mse)
results %>%
group_by(model, nclass, decay) %>%
summarise(mean(acc), mean(mse))
gs = expand.grid('gs', c(0.001, 0.005), c(1, .999, .995, .99, .95, .9),1:20)
vq = expand.grid('vq', c(0.001, 0.005), 1, 1:20)
pars = rbind(gs, vq)
write.table(pars, file = '~/Documents/GitHub/LCA_VAE/sim_pars.txt', col.names = F, row.names = F, quote = F)
